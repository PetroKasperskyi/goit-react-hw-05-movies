{"version":3,"file":"static/js/425.d3eafaf1.chunk.js","mappings":"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","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["export const API_KEY = 'f869371a40a3de8a0444f13917eeabbd';\nexport const BASE_URL = `https://api.themoviedb.org/3/`;\n\n","import styled from 'styled-components';\n\nexport const ListActors = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n  text-align: center;\n`;\n\nexport const ItemActors = styled.li`\n  flex-basis: calc((100% - 60px) / 4);\n`;\n\nexport const ImgActors = styled.img`\n  margin-bottom: 10px;\n`;\nexport const TextActors = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n  font-style: italic;\n  \n`;","import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { BASE_URL, API_KEY } from 'api';\nimport { generator } from 'pages/MovieDetails/MovieDetails';\nimport { ListActors, ItemActors, TextActors, ImgActors } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actorList, setActorList] = useState([]);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    axios\n      .get(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`)\n      .then(({ data }) => setActorList(data.cast))\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  \n\n  return (\n    <>\n      <ListActors>\n              {actorList.length > 0 ?(\n                  actorList.map(actor => (\n          <ItemActors key={actor.id}>\n            <ImgActors\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n                  : generator.generateRandomAvatar()\n              }\n              alt={actor.name}\n            />\n            <TextActors>{actor.name}</TextActors>\n            <TextActors>{actor.character}</TextActors>\n          </ItemActors>\n                  ))\n              ) : (\n                      <p>We don't have any actors information</p>\n              )\n    }\n              \n      </ListActors>\n    </>\n  );\n};\n\nexport default Cast;","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Description = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 25px;\n`;\n\nexport const Button = styled(Link)`\n  background: #020250;\n  border: 1px solid #020250;\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.2) 1px 2px 4px;\n  box-sizing: border-box;\n  color: #fce803;\n  display: inline-block;\n  text-decoration: none;\n\n  outline: 0;\n  padding: 10px 25px;\n  margin-top: 20px;\n  margin-bottom: 15px;\n  text-align: center;\n\n  &:hover,\n  &:active {\n    background-color: initial;\n    color: #4e0963;\n  }\n\n  &:active {\n    opacity: 0.5;\n  }\n`;\n\nexport const MovieDetTittle = styled.h1`\n  font-size: 24px;\n  font-weight: 700;\n  color: #020250;\n`;\n\nexport const MovieDetText = styled.p`\n  font-size: 22px;\n  font-weight: 600;\n  \n  color: #020250;\n`;\n\nexport const MovieDetSubTittle = styled.h2`\n  font-size: 22px;\n  font-weight: 600;\n  \n\n  color: #020250;\n`;\nexport const MovieDetlsDesc = styled.p`\n  font-size: 18px;\n  font-weight: 400;\n  color: #020250;\n`;\n\nexport const MovieDetPageSubTittle = styled.h3`\n  font-size: 24px;\n  color: #020250;\n  text-align: center;\n  margin-bottom: 20px;\n`;\n\nexport const InfoList = styled.ul`\n  display: flex;\n  gap: 30px;\n  margin-bottom: 20px;\n`;","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { AvatarGenerator } from 'random-avatar-generator';\nimport { BASE_URL, API_KEY } from 'api';\nimport styled from 'styled-components';\n\n\nimport {\n  Description,\n  Button,\n  MovieDetTittle,\n  MovieDetText,\n  MovieDetSubTittle,\n  MovieDetlsDesc,\n  MovieDetPageSubTittle,\n  InfoList,\n} from './MovieDetails.styled';\nimport { LoadingText } from 'components/Layout/Layout.styled';\n\n\nexport const generator = new AvatarGenerator();\n\nconst StyledLinkInfo = styled(Link)`\n  color: #020250;\n  text-decoration: none;\n  font-size: 24px;\n\n  &:active {\n    color: #e0e005;\n    font-weight: 500;\n    opacity: 0.5;\n  }\n`;\n\n  \n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    axios\n      .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\n      .then(({ data }) => setMovieDetails(data))\n      .catch(error => setError(error));\n  }, [movieId]);\n\n \n\n  return (\n    <>\n      <Button to={backLinkLocationRef.current}>Go back</Button>\n      {error && <p>{error.message}</p>}\n      {movieDetails && (\n        <Description>\n          <div>\n            <img\n              src={\n                movieDetails.poster_path\n                  ? `https://image.tmdb.org/t/p/w500/${movieDetails.poster_path}`\n                  : generator.generateRandomAvatar()\n              }\n              width=\"200px\"\n              alt={movieDetails.title}\n            />\n          </div>\n          <div>\n            <MovieDetTittle>\n              {movieDetails.title}\n              {' ('}\n              {movieDetails.release_date &&\n                movieDetails.release_date.slice(0, 4)}\n              {')'}\n            </MovieDetTittle>\n            <MovieDetText>\n              User score: {Math.round(movieDetails.vote_average * 10)}%\n            </MovieDetText>\n            <MovieDetSubTittle>Overview</MovieDetSubTittle>\n            <MovieDetlsDesc>{movieDetails.overview}</MovieDetlsDesc>\n            <MovieDetSubTittle>Genres</MovieDetSubTittle>\n            <MovieDetlsDesc>\n              {movieDetails.genres &&\n                movieDetails.genres.map(i => i.name + ' ')}\n            </MovieDetlsDesc>\n          </div>\n        </Description>\n      )}\n      <MovieDetPageSubTittle>\n        Additional information\n      </MovieDetPageSubTittle>\n      <InfoList>\n        <li>\n          <StyledLinkInfo to=\"cast\">Cast</StyledLinkInfo>\n        </li>\n        <li>\n          <StyledLinkInfo to=\"reviews\">Reviews</StyledLinkInfo>\n        </li>\n      </InfoList>\n      <Suspense fallback={<LoadingText>Loading...</LoadingText>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails ;"],"names":["API_KEY","BASE_URL","ListActors","styled","_templateObject","_taggedTemplateLiteral","ItemActors","_templateObject2","ImgActors","_templateObject3","TextActors","_templateObject4","movieId","useParams","_useState","useState","_useState2","_slicedToArray","actorList","setActorList","useEffect","axios","concat","then","_ref","data","cast","catch","error","console","log","_jsx","_Fragment","children","length","map","actor","_jsxs","src","profile_path","generator","alt","name","character","id","Description","Button","Link","MovieDetTittle","MovieDetText","MovieDetSubTittle","_templateObject5","MovieDetlsDesc","_templateObject6","MovieDetPageSubTittle","_templateObject7","InfoList","_templateObject8","AvatarGenerator","StyledLinkInfo","_location$state$from","_location$state","movieDetails","setMovieDetails","_useState3","_useState4","setError","location","useLocation","backLinkLocationRef","useRef","state","from","to","current","message","poster_path","generateRandomAvatar","width","title","release_date","slice","Math","round","vote_average","overview","genres","i","Suspense","fallback","LoadingText","Outlet"],"sourceRoot":""}